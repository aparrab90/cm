# Reserva de Citas Médicas | Diagrama
[Inicio](/doc/Readme.md) | [__Diagrama__](/doc/Clases,md) | [Reglas](/doc/Reglas.md)

# Diagrama
Clases, métodos y relaciones en el sistema de gestión de citas médicas.

![Diagrama de Clases](/doc/CitasMedicas.png)


## Controlador

La clase `Controlador` es el núcleo del sistema de gestión de citas médicas. Es responsable de administrar las citas médicas, aplicar reglas de validación y gestionar la impresión de citas.

### Atributos

- `mapaCitas`: Un mapa que almacena las citas médicas organizadas por fecha.
- `validationRules`: Una lista de reglas de validación que se aplican a cada cita médica.
- `citaMedicaFactory`: La fábrica utilizada para crear instancias de citas médicas.
- `citasPrinter`: La impresora utilizada para mostrar las citas médicas en la consola.

### Métodos

- `verificarYAgregarCita(CitaMedica cita)`: Este método se encarga de verificar si una cita médica cumple con las reglas de validación y, si es así, la agrega al mapa de citas.
- `agregarCita(CitaMedica cita)`: Agrega una cita médica al mapa de citas.
- `cargarCitasMedicas(String fileName)`: Lee citas médicas desde un archivo y las carga en el sistema, aplicando las reglas de validación.
- `imprimirCitas()`: Imprime todas las citas médicas en el mapa.

## CitaMedica

La clase `CitaMedica` representa una cita médica individual.

### Atributos

- `fecha`: La fecha de la cita médica.
- `hora`: La hora de la cita médica.
- `tipo`: El tipo de cita médica (general, especialista, etc.).
- `especialidad`: La especialidad médica (si es una cita de especialista).
- `paciente`: El paciente que tiene la cita médica.
- `nuevacita`: Indica si la cita es una nueva cita o una que se ha cargado desde un archivo.

### Métodos

- `isNuevacita()`: Comprueba si la cita es una nueva cita.
- Otros métodos relevantes que puedas haber implementado.

## CitaValidationRule (Interfaz)

La interfaz `CitaValidationRule` define un conjunto de reglas de validación que se aplican a las citas médicas. Las clases que implementan esta interfaz deben proporcionar una implementación del método `validate`.

## Paciente

La clase `Paciente` representa a un paciente que tiene una cita médica. Esta clase también puede estar asociada a un apoderado en caso de ser necesario.

### Atributos

- `identificacion`: La identificación del paciente.
- `nombres`: Los nombres del paciente.
- `apellidos`: Los apellidos del paciente.
- `fechaNacimiento`: La fecha de nacimiento del paciente.
- `datos_contacto`: Los datos de contacto del paciente.
- `apoderado` (Opcional): El apoderado del paciente, si corresponde.

### Métodos

- `getApoderado()`: Devuelve el apoderado asociado al paciente.
- `setApoderado(Apoderado apoderado)`: Establece el apoderado del paciente, si corresponde.
- Otros métodos relevantes que puedas haber implementado.

## Apoderado

La clase `Apoderado` representa a un apoderado de un paciente. Esta clase se utiliza en caso de que un paciente requiera un representante legal.

### Atributos

- `identificacion`: La identificación del apoderado.
- `nombres`: Los nombres del apoderado.
- `apellidos`: Los apellidos del apoderado.
- `fechaNacimiento`: La fecha de nacimiento del apoderado.
- `datos_contacto`: Los datos de contacto del apoderado.

### Métodos

- `isMayorEdad()`: Comprueba si el apoderado es mayor de edad.
- Otros métodos relevantes que puedas haber implementado.

## DatosContacto

La clase `DatosContacto` almacena información de contacto, como números de teléfono y direcciones de correo electrónico.

### Atributos

- `telefonoContacto`: El número de teléfono de contacto.
- `correoElectronico`: La dirección de correo electrónico de contacto.

